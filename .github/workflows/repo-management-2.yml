name: Manage Repository 2
on:
  workflow_dispatch:
    inputs:
      language_setup:
        description: 'JSON string specifying the programming language and libraries for backend and frontend'
        required: true
        type: string
      project_name:
        description: 'The name of the project'
        required: true
        # default: 'ecommerce'
      project_description:
        description: 'Description of the project'
        required: false
        default: ''
      action:
        description: 'Action to perform: create, create_from_template, delete, update, grant_access, or revoke_access'
        required: true
        type: choice
        # default: 'create_from_template'
        options:
          - create_from_template
          - grant_access
          - revoke_access
      org_name:
        description: 'GitHub organization or user name'
        required: false
        default: 'FathAllaTechOps'
      template_owner:
        description: 'Owner of the template repository (only used for create_from_template action)'
        required: false
        default: 'FathAllaTechOps'
      homepage:
        description: 'Repository homepage URL'
        required: false
        default: 'https://github.com'
      github_team_name:
        description: 'Name of the GitHub team to grant/revoke access'
        required: false
        default: 'vbitdc-sre-admin'
      role:
        description: 'Role for the team access (read, triage, write, maintain, admin)'
        required: true
        type: choice
        default: 'admin'
        options:
          - read
          - triage
          - write
          - maintain
          - admin
          
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      stack: ${{ steps.parse_json.outputs.stack }}
    steps:
      - name: Parse JSON input
        id: parse_json
        run: |
          language_setup='${{ github.event.inputs.language_setup }}'
          stack=$(echo $language_setup | jq -r 'keys | @json')
          echo "stack=$stack" >> $GITHUB_OUTPUT

  manage-repo:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        stack: ${{fromJson(needs.setup.outputs.stack)}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Save the input to a file
        run: |
          echo '${{ github.event.inputs.language_setup }}' >> language_setup.json 
          cat language_setup.json
      
      - name: Extract ${{ matrix.stack }} details into stack.json
        run: |
          echo '${{ github.event.inputs.language_setup }}' | jq '.${{ matrix.stack }}' > stack.json

      - name: Featch the repository structure
        run: |
          # Setup Environment variables
          export PROJECT_NAME=${{ github.event.inputs.project_name }}
          export PROJECT_DESCRIPTION=${{ github.event.inputs.project_description }}

          python3 ./python-scripts/2-send_curl.py

      - name: Setup Repository Parameters
        run: |
          if [ ${{ matrix.stack }} == "frontend" ]; then
            echo "REPO_NAME=vbitdc-${{ github.event.inputs.project_name }}-ui" >> $GITHUB_ENV
          else
            echo "REPO_NAME=vbitdc-${{ github.event.inputs.project_name }}-api" >> $GITHUB_ENV
          fi

      - name: Determine Template Repository
        run: |
            case $(jq -r '.technology' stack.json) in
            react)
              echo "TEMPLATE_REPO=vbitdc-repository-template-react" >> $GITHUB_ENV
              ;;
            nodejs)
              echo "TEMPLATE_REPO=vbitdc-repository-template-nodejs" >> $GITHUB_ENV
              ;;
            java)
              echo "TEMPLATE_REPO=vbitdc-repository-template-java" >> $GITHUB_ENV
              ;;
            python)
              echo "TEMPLATE_REPO=vbitdc-repository-template-python" >> $GITHUB_ENV
              ;;
            *)
              echo "TEMPLATE_REPO=vbitdc-repository-template" >> $GITHUB_ENV
              ;;
            esac

      - name: Login to GitHub
        run: echo "${{ secrets.TOKEN }}" | gh auth login -h github.com -p https --with-token

      - name: Create Repository from Template
        if: ${{ github.event.inputs.action == 'create_from_template' }}
        run: |
          gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.event.inputs.template_owner }}/${{ env.TEMPLATE_REPO }}/generate \
            -f owner="${{ github.event.inputs.org_name }}" \
            -f name="${{ env.REPO_NAME }}" \
            -f description="${{ github.event.inputs.project_description }}" \
            -F include_all_branches=false 

      - name: Unzip the repository structure file
        run: unzip $(jq -r '.technology' stack.json).zip

      - name: wait for 10 seconds
        run: sleep 10
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.org_name }}/${{ env.REPO_NAME }}
          token: ${{ secrets.TOKEN }}
      
      - name: ls
        run: ls

      - name: Create Development Branch
        run: |
          git checkout -b development
          cp -r ../$(jq -r '.technology' stack.json)/* .
          git add .
          git commit -m "Initiate the repository structure"
          git push --set-upstream origin development



